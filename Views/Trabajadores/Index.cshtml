<h1>Técnicos</h1>

<div class="row">
    <div class="col">
    </div>
    <div class="col">
        <div>
            <canvas id="Resueltos"></canvas>
        </div>
        <div>
            <canvas id="Pendientes"></canvas>
        </div>
        <div>
            <canvas id="EnProceso"></canvas>
        </div>
        <div>
            <canvas id="Cancelados"></canvas>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="~/js/signalR.js"></script>

<script>
    const ctxPendientes = document.getElementById('Pendientes');
    const ctxEnProceso = document.getElementById('EnProceso');
    const ctxResueltos = document.getElementById('Resueltos');
    const ctxCancelados = document.getElementById('Cancelados');

    const dataPendientes = {
        labels: [
            'Pendientes'
        ],
        datasets: [{
            label: 'Reportes',
            data: [],
            backgroundColor: [
                'rgb(255, 99, 132)',
            ],
            hoverOffset: 4
        }]
    };
    const dataEnProceso = {
        labels: [
            'En Proceso'
        ],
        datasets: [{
            label: 'Reportes',
            data: [],
            backgroundColor: [
                'rgb(54, 162, 235)',
            ],
            hoverOffset: 4
        }]
    };
    const dataResueltos = {
        labels: [
            'Resueltos'
        ],
        datasets: [{
            label: 'Reportes',
            data: [],
            backgroundColor: [
                'rgb(75, 192, 192)',
            ],
            hoverOffset: 4
        }]
    };
    const dataCancelados = {
        labels: [
            'Cancelados'
        ],
        datasets: [{
            label: 'Reportes',
            data: [],
            backgroundColor: [
                'rgb(255, 206, 86)',
            ],
            hoverOffset: 4
        }]
    };    
    const resueltos = new Chart(ctxResueltos, {
        type: 'bar',
        data: dataResueltos,
    });
    const pendientes = new Chart(ctxPendientes, {
        type: 'bar',
        data: dataPendientes,
    });
    const enProceso = new Chart(ctxEnProceso, {
        type: 'bar',
        data: dataEnProceso,
    });
    const cancelados = new Chart(ctxCancelados, {
        type: 'bar',
        data: dataCancelados,
    });



    function obtenerReportes() {

        fetch("http://localhost:5157/Transacciones/GetReportes", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                Data = data;


            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }
    function obtenerReportesPendientes() {

        fetch("http://localhost:5157/Transacciones/GetReportesPendientes", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                pendientes.data.datasets[0].data = [data];
            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }
    function obtenerReportesEnProceso() {

        fetch("http://localhost:5157/Transacciones/GetReportesEnProceso", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                enProceso.data.datasets[0].data = [data];
                
            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }
    function obtenerReportesResueltos() {

        fetch("http://localhost:5157/Transacciones/GetReportesResueltos", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                resueltos.data.datasets[0].data = [data];
            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }
    function obtenerReportesCancelados() {

        fetch("http://localhost:5157/Transacciones/GetReportesCancelados", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                cancelados.data.datasets[0].data = [data];
            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/ReporteHub")
        .build();
    connection.start().then(() => {
        connection.invoke("AddToGroup", "Tecnicos").catch(err => console.error(err.toString()));
        console.log("Conexión exitosa");
    }).catch(err => console.error(err.toString()));

    connection.on("ReceiveReporte", (reporte) => {
        console.log("Reporte recibido: ", reporte);
    });
    connection.on("RecibirReporte", (reporte) => {

        if (reporte && reporte.fallo) {
            const nombreCliente = reporte.nombreCliente;
            console.log("Nuevo Reporte de: " + nombreCliente + "\n" + "Con falla de: " + reporte.fallo);
            alert("Nuevo reporte de: " + reporte.fallo);
            console.log(reporte);
        } else {
            console.error("El objeto reporte no contiene la propiedad nombreCliente o es nulo:", reporte);
        }
    });

    obtenerReportes();
    obtenerReportesPendientes();
    obtenerReportesCancelados();
    obtenerReportesEnProceso();
    obtenerReportesResueltos();

</script>