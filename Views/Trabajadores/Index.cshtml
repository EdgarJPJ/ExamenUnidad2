<h1>Técnicos</h1>

<div class="row">
    <div class="col">
    </div>
    <div class="col">
        <div>
            <canvas id="Estado"></canvas>
        </div>
        <div>
            <canvas id="Prioridad"></canvas>
        </div>
    </div>
</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="~/js/signalR.js"></script>

<script>
    const ctx = document.getElementById('Estado')
    const ctx2 = document.getElementById('Prioridad')
    const Prioridad = new Chart(ctx2, {
        type: 'bar',
        data: {
            labels: [, 'Alta', 'Media', 'Baja'],
            datasets: [{
                label: 'Prioridad de Reportes',
                data: [0, 0, 0],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(75, 192, 192, 0.2)',

                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)',
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    const Estado = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Pendientes', 'En Proceso', 'Resueltos', 'Cancelados'],
            datasets: [{
                label: 'Estado de Reportes',
                data: [0, 0, 0, 0],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(255, 206, 86, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(255, 206, 86, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    function obtenerReportes() {

        fetch("http://localhost:5157/Transacciones/GetReportes", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                Data = data;


            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }
    function obtenerReportesEstado() {

        fetch("http://localhost:5157/Transacciones/getReportesTotales", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                Estado.data.datasets[0].data= [data[0], data[1], data[2], data[3]];
                Estado.update();

            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }
        function obtenerReportesPrioridad() {

        fetch("http://localhost:5157/Transacciones/getReportesPrioridad", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                Prioridad.data.datasets[0].data= [data[0], data[1], data[2]];
                Prioridad.update();

            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }


    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/ReporteHub")
        .build();
    connection.start().then(() => {
        connection.invoke("AddToGroup", "Tecnicos").catch(err => console.error(err.toString()));
        console.log("Conexión exitosa");
    }).catch(err => console.error(err.toString()));

    connection.on("ReceiveReporte", (reporte) => {
        console.log("Reporte recibido: ", reporte);
    });
    connection.on("RecibirReporte", (reporte) => {

        if (reporte && reporte.fallo) {
            const nombreCliente = reporte.nombreCliente;
            console.log("Nuevo Reporte de: " + nombreCliente + "\n" + "Con falla de: " + reporte.fallo);
            alert("Nuevo reporte de: " + reporte.fallo);
            Estado.update();
            console.log(reporte);
        } else {
            console.error("El objeto reporte no contiene la propiedad nombreCliente o es nulo:", reporte);
        }
    });

obtenerReportes();
obtenerReportesEstado();
obtenerReportesPrioridad();

</script>