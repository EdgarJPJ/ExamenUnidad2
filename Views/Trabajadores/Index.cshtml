<h1>Técnicos</h1>

<div class="row">
    <div class="col">
        <div>
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Nombre del Cliente</th>
                        <th>Falla</th>
                        <th>Prioridad</th>
                        <th>Técnico</th>
                    </tr>
                </thead>
                <tbody id="tablaReportes">
                </tbody>
        </div>
    </div>
    <div class="col">
        <div>
            <canvas id="Estado"></canvas>
        </div>
        <div class="col">
            <div>
                <canvas id="Prioridad"></canvas>
            </div>
        </div>
    </div>
</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="~/js/signalR.js"></script>

<script>

    function guardarReportesLocalStorage(reportes) {
        localStorage.setItem("reportes", JSON.stringify(reportes));
    }

    function cargarReportesLocalStorage() {
        let reportesGuardados = localStorage.getItem("reportes");
        if (reportesGuardados) {
            return JSON.parse(reportesGuardados);
        }
        return [];
    }
    const ctx = document.getElementById('Estado')
    const ctx2 = document.getElementById('Prioridad')
    const Prioridad = new Chart(ctx2, {
        type: 'bar',
        data: {
            labels: ['Alta', 'Media', 'Baja'],
            datasets: [{
                label: 'Prioridad de Reportes',
                data: [0, 0, 0],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(75, 192, 192, 0.2)',

                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)',
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    const Estado = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Pendientes', 'En Proceso', 'Resueltos', 'Cancelados'],
            datasets: [{
                label: 'Estado de Reportes',
                data: [0, 0, 0, 0],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(255, 206, 86, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(255, 206, 86, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });


    function llenarTabla() {
        let tbodytablaReportes = document.getElementById("tablaReportes");
        tbodytablaReportes.innerHTML = "";
        reportes.forEach(reporte => {
            let fila = document.createElement("tr");
            let celdaNombreCliente = document.createElement("td");
            let celdaFallo = document.createElement("td");
            let celdaPrioridad = document.createElement("td");
            let celdaTecnico = document.createElement("td");
            let celdaAceptar = document.createElement("td");
            let botonAceptarReporte = document.createElement("button");
            let celdaBotonTerminar = document.createElement("td");
            let botonTerminarReporte = document.createElement("button");
            botonTerminarReporte.style.display = "none";
            botonAceptarReporte.innerHTML = '<i class="bi bi-pencil-square"></i> Iniciar reparación';
            botonAceptarReporte.className = "btn btn-success";
            botonAceptarReporte.addEventListener("click", () => {
                let Reporte = reporte;
                Reporte.estado = "En proceso";
                botonAceptarReporte.disabled = true;
                botonAceptarReporte.style.display = "none";
                botonTerminarReporte.style.display = "block";
                actualizarReporteEnLocalStorage(Reporte);
                botonTerminarReporte.innerHTML = '<i class="bi bi-pencil-square"></i> Reparación terminada';
                botonTerminarReporte.className = "btn btn-success";
                botonTerminarReporte.addEventListener("click", () => {
                    Reporte.estado = "Resuelto";
                    botonAceptarReporte.disabled = true;
                    botonAceptarReporte.style.display = "block";
                    botonTerminarReporte.style.display = "none";
                    actualizarReporteEnLocalStorage(Reporte);
                    fetch("http://localhost:5157/Transacciones/actualizarReporte", {
                        method: "POST",
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(Reporte)
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Error: ${response.status} ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(json => {
                            console.log(json);
                            if (json.mensaje === "Reporte actualizado") {
                                alert("Reparación terminada");
                                Estado.update();
                                connection.invoke("SendReporte", "Tecnicos", Reporte).catch(err => console.error("Error al invocar SendReporte:", err.toString()));
                            } else {
                                alert("Error al editar el reporte: " + json.mensaje);
                            }
                        })
                        .catch(error => {
                            console.error("Error al editar el reporte:", error);
                            alert("Error al editar el reporte: " + error.message);
                        });
                });


                fetch("http://localhost:5157/Transacciones/actualizarReporte", {
                    method: "POST",
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(Reporte)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Error: ${response.status} ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(json => {
                        console.log(json);
                        if (json.mensaje === "Reporte actualizado") {
                            alert("Reparación iniciada");
                            Estado.update();
                            connection.invoke("SendReporte", "Tecnicos", Reporte).catch(err => console.error("Error al invocar SendReporte:", err.toString()));
                        } else {
                            alert("Error al editar el reporte: " + json.mensaje);
                        }
                    })
                    .catch(error => {
                        console.error("Error al editar el reporte:", error);
                        alert("Error al editar el reporte: " + error.message);
                    });
            });
            celdaAceptar.appendChild(botonAceptarReporte);
            celdaNombreCliente.textContent = reporte.nombreCliente;
            celdaFallo.textContent = reporte.fallo;
            celdaPrioridad.textContent = reporte.prioridad;
            celdaTecnico.textContent = reporte.tecnico;
            celdaBotonTerminar.appendChild(botonTerminarReporte);
            fila.appendChild(celdaNombreCliente);
            fila.appendChild(celdaFallo);
            fila.appendChild(celdaPrioridad);
            fila.appendChild(celdaTecnico);
            fila.appendChild(celdaAceptar);
            fila.appendChild(celdaBotonTerminar);
            tbodytablaReportes.appendChild(fila);
            obtenerReportesEstado();

        });
    }


    function obtenerReportes() {
        let reportesLocal = cargarReportesLocalStorage();
        if (reportesLocal.length > 0) {
            reportes = reportesLocal;
            llenarTabla();
        } else {
            fetch("http://localhost:5157/Transacciones/GetReportes", {
                method: "GET",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Error: ${response.status} ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    reportes = data;
                    guardarReportesLocalStorage(reportes);
                    llenarTabla();
                })
                .catch(error => {
                    console.error("Error al obtener los reportes:", error);
                });
        }

    }
    function actualizarReporteEnLocalStorage(reporteActualizado) {
        let reportes = cargarReportesLocalStorage();
        for (let i = 0; i < reportes.length; i++) {
            if (reportes[i].id === reporteActualizado.id) {
                reportes[i] = reporteActualizado; 
                guardarReportesLocalStorage(reportes); 
                break;
            }
        }
    }
    function obtenerReportesEstado() {

        fetch("http://localhost:5157/Transacciones/getReportesTotales", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                Estado.data.datasets[0].data = [data[0], data[1], data[2], data[3]];
                Estado.update();

            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }
    function obtenerReportesPrioridad() {

        fetch("http://localhost:5157/Transacciones/getReportesPrioridad", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(Data => {
                console.log(Data);
                Prioridad.data.datasets[0].data = [Data[0], Data[1], Data[2]];


            })
            .catch(error => {
                console.error("Error al obtener los reportes:", error);
            });
    }


    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/ReporteHub")
        .build();
    connection.start().then(() => {
        connection.invoke("AddToGroup", "Tecnicos").catch(err => console.error(err.toString()));
        console.log("Conexión exitosa");
    }).catch(err => console.error(err.toString()));

    connection.on("ReceiveReporte", (reporte) => {
        console.log("Reporte recibido: ", reporte);
    });
    connection.on("RecibirReporte", (reporte) => {

        if (reporte && reporte.fallo) {
            const nombreCliente = reporte.nombreCliente;
            console.log("Nuevo Reporte de: " + nombreCliente + "\n" + "Con falla de: " + reporte.fallo);
            alert("Nuevo reporte de: " + reporte.fallo);
        } else {
            console.error("El objeto reporte no contiene la propiedad nombreCliente o es nulo:", reporte);
        }
    });

    obtenerReportes();
    obtenerReportesPrioridad();
    obtenerReportesEstado();

</script>